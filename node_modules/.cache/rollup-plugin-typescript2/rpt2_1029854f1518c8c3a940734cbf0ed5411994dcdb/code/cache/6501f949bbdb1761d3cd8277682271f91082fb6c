{"code":"import './spawningFunctions';\r\nexport function spawnRequests(room) {\r\n    // Find energy structures\r\n    const spawnStructures = findSpawnStructures();\r\n    function findSpawnStructures() {\r\n        // Get array of spawns and extensions\r\n        const spawnsAndExtensions = room.get('spawn').concat(room.get('extension'));\r\n        // Filter out structures that aren't active\r\n        const unfilteredSpawnStructures = spawnsAndExtensions.filter((structure) => structure.isActive());\r\n        // Add each spawnStructures with their range to the object\r\n        const anchorPoint = room.get('anchorPoint');\r\n        // Filter energy structures by distance from anchorPoint\r\n        const filteredSpawnStructures = unfilteredSpawnStructures.sort((a, b) => a.pos.getRangeTo(anchorPoint.x, anchorPoint.y + 5) - b.pos.getRangeTo(anchorPoint.x, anchorPoint.y + 5));\r\n        return filteredSpawnStructures;\r\n    }\r\n    //\r\n    let spawnEnergyAvailable = room.energyAvailable;\r\n    let spawnEnergyCapacity = room.energyCapacityAvailable;\r\n    class RoleSpawningOpts {\r\n        constructor() {\r\n            this.memoryAdditions = {};\r\n            this.defaultParts = [];\r\n            this.extraParts = [];\r\n            this.maxParts = 50;\r\n        }\r\n        constructBody() {\r\n            this.body = [];\r\n            this.tier = 0;\r\n            this.cost = 0;\r\n            let maxCost = spawnEnergyCapacity;\r\n            if (room.creepCount.harvester == 0 || room.creepCount.hauler == 0) {\r\n                maxCost = spawnEnergyAvailable;\r\n            }\r\n            if (this.defaultParts.length > 0) {\r\n                for (const part of this.defaultParts) {\r\n                    // Stop loop if cost is more than or equal to maxCost\r\n                    if (this.cost >= maxCost)\r\n                        break;\r\n                    this.body.push(part);\r\n                    this.cost += BODYPART_COST[part];\r\n                }\r\n                this.tier += 1;\r\n            }\r\n            // Stop if the body amount is equal to maxParts or the cost of the creep is more than we can afford\r\n            while (this.body.length != this.maxParts && this.cost < maxCost) {\r\n                // Loop through each part in extraParts\r\n                for (let part of this.extraParts) {\r\n                    // Stop function if role's body is the size of maxParts\r\n                    if (this.body.length == this.maxParts)\r\n                        return;\r\n                    // Add part and cost\r\n                    this.body.push(part);\r\n                    this.cost += BODYPART_COST[part];\r\n                }\r\n            }\r\n            this.tier += 1;\r\n            // So long as cost is more than maxCost\r\n            while (this.cost > maxCost) {\r\n                // Take away cost of the last part\r\n                const part = this.body[this.body.length - 1];\r\n                this.cost -= BODYPART_COST[part];\r\n                // Take away the last part\r\n                this.body.slice(0, this.body.length - 1);\r\n            }\r\n            // Construct memory\r\n            const memory = {\r\n                role: this.role,\r\n                roomFrom: room.name,\r\n            };\r\n            // Add additions to memory\r\n            let propertyName;\r\n            for (propertyName in this.memoryAdditions) {\r\n                memory[propertyName] = this.memoryAdditions[propertyName];\r\n            }\r\n            this.extraOpts = {\r\n                memory: memory,\r\n                energyStructures: spawnStructures,\r\n            };\r\n        }\r\n    }\r\n    //\r\n    const minCreeps = {};\r\n    //\r\n    const source1HarvestPositionsAmount = room.get('source1HarvestPositions').length;\r\n    const source2HarvestPositionsAmount = room.get('source2HarvestPositions').length;\r\n    // Harvester spawning opts\r\n    class HarvesterSpawningOpts extends RoleSpawningOpts {\r\n        constructor() {\r\n            super();\r\n            const opts = this;\r\n            this.role = 'sourceHarvester';\r\n            bodyOpts();\r\n            function bodyOpts() {\r\n                if (spawnEnergyCapacity >= 700) {\r\n                    opts.defaultParts = [];\r\n                    opts.extraParts = [WORK, WORK, WORK, MOVE];\r\n                    opts.maxParts = 8;\r\n                    minCreeps.sourceHarvester = room.get('sources').length;\r\n                    opts.memoryAdditions.moveType = 'travel';\r\n                    return;\r\n                }\r\n                if (spawnEnergyCapacity >= 300) {\r\n                    opts.defaultParts = [];\r\n                    opts.extraParts = [WORK];\r\n                    opts.maxParts = 6;\r\n                    let maxCreepsPerSource = 2;\r\n                    minCreeps.sourceHarvester = Math.min(source1HarvestPositionsAmount, maxCreepsPerSource) + Math.min(source2HarvestPositionsAmount, maxCreepsPerSource);\r\n                    opts.memoryAdditions.moveType = 'pull';\r\n                    return;\r\n                }\r\n            }\r\n            function findSourceToHarvest() {\r\n                // Structure data on sources that relates to spawning\r\n                const spawningDataForSources = {\r\n                    source1: {\r\n                        amount: room.creepsOfSourceAmount.source1,\r\n                        max: Math.min(source1HarvestPositionsAmount, minCreeps.sourceHarvester / 2),\r\n                    },\r\n                    source2: {\r\n                        amount: room.creepsOfSourceAmount.source2,\r\n                        max: Math.min(source2HarvestPositionsAmount, minCreeps.sourceHarvester / 2),\r\n                    }\r\n                };\r\n                // Loop through each sourceName\r\n                for (const sourceName in spawningDataForSources) {\r\n                    const sourceData = spawningDataForSources[sourceName];\r\n                    // Select sourceData with less creeps than max\r\n                    if (sourceData.amount < sourceData.max)\r\n                        return sourceName;\r\n                }\r\n                return 'noSourceFound';\r\n            }\r\n            // Assign ideal sourceName to creep\r\n            opts.memoryAdditions.sourceName = findSourceToHarvest();\r\n            // Use previously constructed opts to produce a viable spawning body\r\n            this.constructBody();\r\n        }\r\n    }\r\n    // Construct spawning opts for each role\r\n    const spawningOpts = [];\r\n    spawningOpts.push(new HarvesterSpawningOpts());\r\n    // Construct requiredCreeps\r\n    const requiredCreeps = {};\r\n    // Loop through each role\r\n    for (const role of global.creepRoles) {\r\n        // Define requiredCreeps for the role as minCreeps - existing creeps\r\n        requiredCreeps[role] = minCreeps[role] - room.creepCount[role];\r\n    }\r\n    // return info on the structure of new creeps and what amount of them to spawn\r\n    return {\r\n        spawningOpts,\r\n        requiredCreeps,\r\n    };\r\n}\r\n//# sourceMappingURL=spawnRequests.js.map","references":["C:/Users/carso/Documents/GitHub/The-Internationale-Screeps-Bot/src/room/spawningFunctions.ts"],"map":"{\"version\":3,\"file\":\"spawnRequests.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/room/spawnRequests.ts\"],\"names\":[],\"mappings\":\"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\"}"}

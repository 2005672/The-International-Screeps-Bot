{"code":"Creep.prototype.travel = function (opts) {\r\n    const creep = this;\r\n};\r\nCreep.prototype.isDying = function () {\r\n    const creep = this;\r\n    // Inform as dying if creep is already recorded as dying\r\n    if (creep.memory.dying)\r\n        return true;\r\n    // Stop if creep is spawning\r\n    if (!creep.ticksToLive)\r\n        return false;\r\n    // Stop if creep body parts * 3 is more or less than ticks left alive\r\n    if (creep.ticksToLive > creep.body.length * 3)\r\n        return false;\r\n    // Record creep as dying\r\n    creep.memory.dying = true;\r\n    return true;\r\n};\r\nCreep.prototype.advancedHarvestSource = function (source) {\r\n    const creep = this;\r\n    const harvestResult = creep.harvest(source);\r\n    if (harvestResult != 0)\r\n        return harvestResult;\r\n    // Find amount of energy harvested and record it in data\r\n    const energyHarvested = Math.min(creep.partsOfType(WORK) * 2, source.energy);\r\n    Memory.data.energyHarvested += energyHarvested;\r\n    creep.say('⛏️' + energyHarvested);\r\n    return 0;\r\n};\r\nCreep.prototype.partsOfType = function (type) {\r\n    const creep = this;\r\n    // Filter body parts that are of type, return number of them\r\n    const partsOfType = creep.body.filter(part => part.type == type);\r\n    return partsOfType.length;\r\n};\r\nCreep.prototype.travel = function (opts) {\r\n    const creep = this;\r\n    // Stop if creep can't move\r\n    if (creep.fatigue > 0)\r\n        return false;\r\n    // Stop if creep is spawning\r\n    if (creep.spawning)\r\n        return false;\r\n    // Assign defaults if values arn't provided\r\n    let defaultValues = {\r\n        plainCost: 2,\r\n        swampCost: 6,\r\n        avoidStages: [],\r\n        flee: false,\r\n        cacheAmount: 20,\r\n        avoidEnemyRanges: false,\r\n    };\r\n    for (let defaultName in defaultValues) {\r\n        if (!opts[defaultName])\r\n            opts[defaultName] = defaultValues[defaultName];\r\n    }\r\n    let origin = opts.origin;\r\n    let goal = opts.goal;\r\n    // Stop if there is no inter room path to goal\r\n    if (findInterRoomGoal() == ERR_NO_PATH)\r\n        return ERR_NO_PATH;\r\n    function findInterRoomGoal() {\r\n        // If we are in the room of the goal exit function\r\n        if (origin.roomName == goal.pos.roomName)\r\n            return false;\r\n        let route = creep.memory.route;\r\n        // Check if we need a new route. If so make one\r\n        if (!route || route.length == 0)\r\n            findNewRoute();\r\n        function findNewRoute() {\r\n            creep.room.visual.text(\"New Route\", creep.pos.x, creep.pos.y - 0.5, { color: '#AAF837' });\r\n            const newRoute = Game.map.findRoute(origin.roomName, goal.pos.roomName, {\r\n                routeCallback(roomName) {\r\n                    if (roomName == goal.pos.roomName)\r\n                        return 1;\r\n                    if (!Memory.rooms[roomName] || !Memory.rooms[roomName].stage)\r\n                        return Infinity;\r\n                    if (!opts.avoidStages.includes(Memory.rooms[roomName].stage))\r\n                        return 1;\r\n                    return Infinity;\r\n                }\r\n            });\r\n            route = newRoute;\r\n            creep.memory.route = route;\r\n        }\r\n        // Make sure we can path to the goal's room\r\n        if (route == ERR_NO_PATH)\r\n            return ERR_NO_PATH;\r\n        // Make sure we have a valid route\r\n        if (!route || route.length == 0)\r\n            return false;\r\n        let goalRoom = route[0].room;\r\n        if (goalRoom == creep.room.name) {\r\n            route = route.slice(1);\r\n            creep.memory.route = route;\r\n        }\r\n        // Set new goal in the goalRoom\r\n        goal = { pos: new RoomPosition(25, 25, goalRoom), range: 1 };\r\n        return 0;\r\n    }\r\n    let path = creep.memory.path;\r\n    const lastCache = creep.memory.lastCache;\r\n    const lastRoom = creep.memory.lastRoom;\r\n    findNewPath();\r\n    function findNewPath() {\r\n        if (!path || path.length == 0 || lastRoom != creep.room.name || !lastCache || Game.time - lastCache >= opts.cacheAmount) {\r\n            if (path && path.length == 1) {\r\n                let lastPos = path[path.length - 1];\r\n                lastPos = new RoomPosition(lastPos.x, lastPos.y, lastPos.roomName);\r\n                let rangeFromGoal = lastPos.getRangeTo(goal.x, goal.y);\r\n                if (rangeFromGoal == 0)\r\n                    return;\r\n            }\r\n            creep.room.visual.text(\"New Path\", creep.pos.x, creep.pos.y + 0.5, { color: global.colors.yellow });\r\n            let newPath = PathFinder.search(origin, goal, {\r\n                plainCost: opts.plainCost,\r\n                swampCost: opts.swampCost,\r\n                maxRooms: 1,\r\n                maxOps: 100000,\r\n                flee: opts.flee,\r\n                roomCallback: function (roomName) {\r\n                    let room = Game.rooms[roomName];\r\n                    if (!room)\r\n                        return false;\r\n                    let cm = new PathFinder.CostMatrix;\r\n                    // Prioritize roads if creep will benefit from them\r\n                    if (opts.swampCost != 1) {\r\n                        for (let road of room.get(\"road\")) {\r\n                            cm.set(road.pos.x, road.pos.y, 1);\r\n                        }\r\n                    }\r\n                    // Find each exit pos and set to unwalkable if goal is in room\r\n                    /* if (goal.pos.roomName == room.name) {\r\n\r\n                        for (let x = 0; x < 50; x++) {\r\n\r\n                            for (let y = 0; y < 50; y++) {\r\n\r\n                                if (x <= 0 || x >= 49 || y <= 0 || y >= 49) cm.set(x, y, 255)\r\n                            }\r\n                        }\r\n                    } */\r\n                    // Set sorrounding area of enemyCreeps to unwalkable if position does not have a rampart\r\n                    /* for (let enemy of room.get(\"enemyCreeps\")) {\r\n\r\n                        cm.set(enemy.pos.x, enemy.pos.y, 255)\r\n                    } */\r\n                    // Set unwalkable mySites as unwalkable\r\n                    let mySites = room.find(FIND_MY_CONSTRUCTION_SITES, {\r\n                        filter: s => (s.structureType != STRUCTURE_RAMPART || (s.structureType == STRUCTURE_RAMPART && !s.my)) && s.structureType != STRUCTURE_ROAD && s.structureType != STRUCTURE_CONTAINER\r\n                    });\r\n                    for (let site of mySites) {\r\n                        cm.set(site.pos.x, site.pos.y, 255);\r\n                    }\r\n                    // Set unwalkable structures as unwalkable\r\n                    let structures = room.find(FIND_STRUCTURES, {\r\n                        filter: s => (s.structureType != STRUCTURE_RAMPART || (s.structureType == STRUCTURE_RAMPART && !s.my)) && s.structureType != STRUCTURE_ROAD && s.structureType != STRUCTURE_CONTAINER\r\n                    });\r\n                    for (let structure of structures) {\r\n                        cm.set(structure.pos.x, structure.pos.y, 255);\r\n                    }\r\n                    // Set all creeps as unwalkable\r\n                    /* let creep: Creep\r\n                    for (creep of room.myCreeps) {\r\n\r\n                        cm.set(creep.pos.x, creep.pos.y, 255)\r\n                    } */\r\n                    // Set all power creeps as unwalkable\r\n                    /* for (let creep of room.get(\"allPowerCreeps\")) {\r\n\r\n                        cm.set(creep.pos.x, creep.pos.y, 255)\r\n                    } */\r\n                    return cm;\r\n                }\r\n            }).path;\r\n            // Change path to newPath\r\n            path = newPath;\r\n            creep.memory.path = path;\r\n            // Record room to track if we enter a new room\r\n            creep.memory.lastRoom = creep.room.name;\r\n            // Record time to find next time to path\r\n            creep.memory.lastCache = Game.time;\r\n        }\r\n    }\r\n    // Stop if there is no path\r\n    if (moveWithPath() == ERR_NO_PATH)\r\n        return false;\r\n    function moveWithPath() {\r\n        // Stop if there is no path\r\n        if (!path || path.length == 0)\r\n            return false;\r\n        let pos = path[0];\r\n        // Move to first position of path\r\n        let direction = creep.pos.getDirectionTo(new RoomPosition(pos.x, pos.y, creep.room.name));\r\n        // Assign direction to creep\r\n        creep.direction = direction;\r\n        // Try to move. Stop if move fails\r\n        if (creep.move(direction) == ERR_NO_PATH)\r\n            return ERR_NO_PATH;\r\n        // Delete pos from path\r\n        path = path.slice(1);\r\n        // Assign path to memory\r\n        creep.memory.path = path;\r\n        creep.room.visual.poly(path, { stroke: global.colors.yellow, strokeWidth: .15, opacity: .2, lineStyle: 'normal' });\r\n        // If creep moved\r\n        /* if (arePositionsEqual(creep.pos, pos)) {\r\n            // Delete pos from path\r\n            path = removePropertyFromArray(path, pos)\r\n            // Assign path to memory\r\n            creep.memory.path = path\r\n        } */\r\n        return true;\r\n    }\r\n    return true;\r\n};\r\n//# sourceMappingURL=creepFunctions.js.map","references":[],"map":"{\"version\":3,\"file\":\"creepFunctions.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/room/creeps/creepFunctions.ts\"],\"names\":[],\"mappings\":\"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\"}"}

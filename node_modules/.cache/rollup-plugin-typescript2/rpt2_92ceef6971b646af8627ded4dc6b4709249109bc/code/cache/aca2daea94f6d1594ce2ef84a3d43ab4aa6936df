{"code":"export function spawnRequests(room) {\r\n    //\r\n    const minCreeps = {};\r\n    // Find energy structures\r\n    const energyStructures = findEnergyStructures();\r\n    function findEnergyStructures() {\r\n        // Get array of extensions and spawns\r\n        let unfilteredEnergyStructures = room.find(FIND_MY_STRUCTURES, {\r\n            filter: structure => (structure.structureType == STRUCTURE_EXTENSION\r\n                || structure.structureType == STRUCTURE_SPAWN)\r\n                && structure.isActive()\r\n        });\r\n        // Add each spawnStructures with their range to the object\r\n        const anchorPoint = room.get('anchorPoint');\r\n        const energyStructuresWithRanges = [];\r\n        for (const energyStructure of unfilteredEnergyStructures) {\r\n            // Create object ideal for sorting\r\n            const object = {\r\n                id: energyStructure.id,\r\n                range: energyStructure.pos.getRangeTo(anchorPoint.x, anchorPoint.y + 5)\r\n            };\r\n            // Add object to list\r\n            energyStructuresWithRanges.push(object);\r\n        }\r\n        // Sort energyStructures by range\r\n        const energyStructuresByClosest = energyStructuresWithRanges.sort((a, b) => a.value - b.value);\r\n        const energyStructures = [];\r\n        for (const object of energyStructuresByClosest) {\r\n            // Add structure with id of object to energyStructures\r\n            energyStructures.push(global.findObjectWithId(object.id));\r\n        }\r\n        return energyStructures;\r\n    }\r\n    //\r\n    let spawnEnergyAvailable = room.energyAvailable;\r\n    let spawnEnergyCapacity = room.energyCapacityAvailable;\r\n    class RoleSpawningOpts {\r\n        constructor(role, bodyOpts, memoryAdditions) {\r\n            this.body = [];\r\n            this.tier = 0;\r\n            this.cost = 0;\r\n            let maxCost = spawnEnergyCapacity;\r\n            if (Object.keys(room.myCreeps.harvester).length == 0 || Object.keys(room.myCreeps.hauler).length == 0) {\r\n                maxCost = spawnEnergyAvailable;\r\n            }\r\n            if (bodyOpts.defaultParts.length > 0) {\r\n                for (const part of bodyOpts.defaultParts) {\r\n                    // Stop loop if cost is more than or equal to maxCost\r\n                    if (this.cost >= maxCost)\r\n                        break;\r\n                    this.body.push(part);\r\n                    this.cost += BODYPART_COST[part];\r\n                }\r\n                this.tier += 1;\r\n            }\r\n            // Stop if the body amount is equal to maxParts or the cost of the creep is more than we can afford\r\n            while (this.body.length != bodyOpts.maxParts && this.cost < maxCost) {\r\n                // Loop through each part in extraParts\r\n                for (let part of bodyOpts.extraParts) {\r\n                    // Stop function if role's body is the size of maxParts\r\n                    if (this.body.length == bodyOpts.maxParts)\r\n                        return;\r\n                    // Add part and cost\r\n                    this.body.push(part);\r\n                    this.cost += BODYPART_COST[part];\r\n                }\r\n            }\r\n            this.tier += 1;\r\n            // So long as cost is more than maxCost\r\n            while (this.cost > maxCost) {\r\n                // Take away the last part\r\n                this.body.slice(0, this.body.length - 1);\r\n            }\r\n            // Construct memory\r\n            let memory = {\r\n                role: role,\r\n                roomFrom: room,\r\n            };\r\n            // Add additions to memory\r\n            let propertyName;\r\n            for (propertyName in memoryAdditions) {\r\n                memory[propertyName] = memoryAdditions[propertyName];\r\n            }\r\n            this.extraOpts = {\r\n                memory: memory,\r\n                energyStructures: energyStructures,\r\n            };\r\n        }\r\n    }\r\n    class BodyOpts {\r\n        constructor() {\r\n            this.defaultParts = [];\r\n            this.extraParts = [];\r\n            this.maxParts = 50;\r\n        }\r\n    }\r\n    let source1HarvestPositionsAmount = room.get('source1HarvestPositions').positions.length;\r\n    let source2HarvestPositionsAmount = room.get('source2HarvestPositions').positions.length;\r\n    class HarvesterBodyOpts extends BodyOpts {\r\n        constructor() {\r\n            super();\r\n            if (spawnEnergyCapacity >= 700) {\r\n                this.defaultParts = [];\r\n                this.extraParts = [WORK, WORK, WORK, MOVE];\r\n                this.maxParts = 8;\r\n                minCreeps.harvester = minCreeps['harvester'] = 2;\r\n                return;\r\n            }\r\n            if (spawnEnergyCapacity >= 300) {\r\n                this.defaultParts = [];\r\n                this.extraParts = [WORK];\r\n                this.maxParts = 6;\r\n                minCreeps.harvester = minCreeps['harvester'] = Math.min(source1HarvestPositionsAmount, 2) + Math.min(source2HarvestPositionsAmount, 2);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    const spawningOpts = [\r\n        new RoleSpawningOpts('harvester', new HarvesterBodyOpts(), {}),\r\n    ];\r\n    return spawningOpts;\r\n}\r\n//# sourceMappingURL=spawnRequests.js.map","references":[],"map":"{\"version\":3,\"file\":\"spawnRequests.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/room/spawnRequests.ts\"],\"names\":[],\"mappings\":\"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\"}"}
